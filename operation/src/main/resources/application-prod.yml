spring:
  application:
    name: operation

---
spring:
  datasource:
    url: jdbc:mysql://${DB_URL}:3306/operation
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: create-drop   # 급하니깐 임시로 ...
    properties:
      hibernate:
        format_sql: false
        show_sql: false
        properties:
          hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT:6379}

  kafka:
    bootstrap-servers: ${KAFKA_BROKER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: operation
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

eureka:
  client:
    serviceUrl:
      defaultZone: http://${EUREKA_HOST}:${EUREKA_PORT:8761}/eureka/
    registryFetchIntervalSeconds: 5
    instanceInfoReplicationIntervalSeconds: 10
    registerWithEureka: true
    fetchRegistry: true
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
    instanceId: ${spring.application.name}:${random.value}

logging:
  level:
    root: WARN
    com.postco: DEBUG
