plugins {
    id 'org.hidetake.swagger.generator'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

bootJar {
    enabled = true
    dependsOn 'copySwaggerUI'
}

jar {
    enabled = true
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // queryDsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // swagger
    swaggerUI "org.webjars:swagger-ui:${swaggerUiVersion}"

    // Eureka - client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // h2
    runtimeOnly 'com.h2database:h2'

    // mysql
    implementation 'mysql:mysql-connector-java:8.0.33'

    implementation project(':core')

    implementation project(':websocket')
}

// OpenAPI 스펙 생성 설정
openapi3 {
    server = "http://localhost:${project.findProperty('server.port')}"
    title = "${project.name} API Documentation"
    description = "API Documentation for ${project.name} with Spring Rest Docs and Swagger UI"
    version = "${project.version}"
    format = "yaml"
    outputDirectory = file("$buildDir/resources/main/static/docs")
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
        options.compilerArgs += [
                "-proc:only",
                "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
        ]
        source = [project(':core').sourceSets.main.java, sourceSets.main.java]
    }
}
    configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

clean {
    delete fileTree(dir: "$buildDir/generated", exclude: ['**/querydsl/**'])
}

// compileQuerydsl 태스크를 classes 태스크에 의존성 추가
tasks.named('compileJava') {
    dependsOn("compileQuerydsl")
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUI'
    from("${tasks.generateSwaggerUI.outputs}")
    into("${layout.buildDirectory.dir('resources/main/static/docs')}")
}

// prepareKotlinBuildScriptModel 오류 방지
tasks.register("prepareKotlinBuildScriptModel") {}

